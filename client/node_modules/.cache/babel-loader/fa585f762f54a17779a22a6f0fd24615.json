{"ast":null,"code":"import _defineProperty from \"C:\\\\dev\\\\Homework\\\\MERN-Google-Books-Search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\dev\\\\Homework\\\\MERN-Google-Books-Search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\dev\\\\Homework\\\\MERN-Google-Books-Search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\dev\\\\Homework\\\\MERN-Google-Books-Search\\\\client\\\\src\\\\pages\\\\Book.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport SaveBtn from \"../components/SaveBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport { Detail } from \"../components/Detail\";\n\nfunction Books() {\n  var _this = this;\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      return setBooks(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  function saveBook(id) {\n    API.saveBook(id).then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread({}, formObject, _defineProperty({}, name, value)));\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault(); // if (formObject.title && formObject.author) {\n\n    API.searchBooks({}) // API.searchBooks({\n    //   title: formObject.title,\n    //   author: formObject.author,\n    //   synopsis: formObject.synopsis\n    // })\n    .then(function (res) {\n      return loadBooks();\n    }).catch(function (err) {\n      return console.log(err);\n    }); // }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"What to read..\\uD83E\\uDD14\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !formObject.title,\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Search Book\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, books.map(function (book) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/books/\" + book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Detail, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 23\n      }\n    }, \" \", book.title, \" \"), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 23\n      }\n    }, \" \", book.author, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 23\n      }\n    }, \" \", book.synopsis, \" This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.\")), /*#__PURE__*/React.createElement(SaveBtn, {\n      onClick: function onClick() {\n        return saveBook(book._id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(DeleteBtn, {\n      onClick: function onClick() {\n        return deleteBook(book._id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    })));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["C:/dev/Homework/MERN-Google-Books-Search/client/src/pages/Book.js"],"names":["React","useState","useEffect","DeleteBtn","SaveBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Detail","Books","books","setBooks","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","saveBook","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","searchBooks","title","length","map","book","_id","author","synopsis"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport SaveBtn from \"../components/SaveBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport { Detail } from \"../components/Detail\";\n\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res =>\n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  function saveBook(id) {\n    API.saveBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({ ...formObject, [name]: value })\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    // if (formObject.title && formObject.author) {\n      API.searchBooks({\n        \n      }) \n      // API.searchBooks({\n      //   title: formObject.title,\n      //   author: formObject.author,\n      //   synopsis: formObject.synopsis\n      // })\n        .then(res => loadBooks())\n        .catch(err => console.log(err));\n    // }\n  };\n\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>What to read..🤔</h1>\n          </Jumbotron>\n          <form>\n            <Input\n              onChange={handleInputChange}\n              name=\"title\"\n              placeholder=\"Title (required)\"\n            />\n            {/* <Input\n                onChange={handleInputChange}\n                name=\"author\"\n                placeholder=\"Author (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"synopsis\"\n                placeholder=\"Synopsis (Optional)\"\n              /> */}\n            <FormBtn\n              disabled={!(formObject.title)}\n              onClick={handleFormSubmit}\n            >\n              Search Book\n              </FormBtn>\n            <hr></hr>\n            <br></br>\n          </form>\n          <hr></hr>\n          <br></br>\n          {books.length ? (\n\n            <List>\n\n              {books.map(book => (\n                <ListItem key={book._id}>\n                  \n                  <Link to={\"/books/\" + book._id}>\n                    <Detail>\n                      <h5> {book.title} </h5>\n                      <h6> {book.author} </h6>\n                      <p> {book.synopsis} This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n                      {/* <strong>\n                        {book.title} by {book.author}\n                      </strong> */}\n                    </Detail>\n                    <SaveBtn onClick={() => saveBook(book._id)} />\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\n                  </Link>\n                  \n                 \n                </ListItem>\n              ))}\n            </List>\n          ) : (\n              <h3>No Results to Display</h3>\n            )}\n\n        </Col>\n        {/* <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {books.length ? (\n              <List>\n                {books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    <SaveBtn onClick={() => saveBook(book._id)} />\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col> */}\n      </Row>\n    </Container>\n  );\n}\n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}